#!/usr/bin/env bash

# This script bootstraps student environments with a private fork of the public assignment
# repository. You should not run this script from a clone of the repository. Rather, run this script
# directly using the instructions in the readme.md file.
#
# TODO: query the ssh agent to see if ssh keys are loaded and prefer using ssh instead of https

# this function must be present in this file because it is curled from student environments
function log_error() {
    echo "error: $1"
    exit
}

# this function must be present in this file because it is curled from student environments
function ensure_exists() {
    local program=$1
    command -v "$program" > /dev/null 2>&1 || log_error "$program not available on path"
}

function usage() {
    echo "usage: $0 username [use_ssh]

$0 bootstraps student environments with a private fork of the public assignment repository.

Note: work in the assignment repository should only be done on unix-like environments. If you are
running Mac OS or Linux, you already have a unix-like environment. If you are running Windows,
please install the Windows Subsystem for Linux and run this script under that environment.

    Positional arguments:
        username            Your GitHub username
        use_ssh             Use ssh instead of HTTPS

    Example:
        $ bash $0 cs404.1 fsareshwala [use_ssh]
    "
}

ensure_exists git

if [[ $# -eq 1 ]]; then
    usage
    exit
fi

ostype="$(uname -s)"
case "${ostype}" in
    CYGWIN* | MINGW*)
        echo "Error: work in the assignment repository can only be done in unix environments."
        echo "Error: it appears you are running $ostype on Windows."
        echo "Error: install the Windows Subsystem for Linux and re-run this script within it."
        exit
        ;;
esac

git config --global core.whitespace fix,-indent-with-non-tab,trailing-space,cr-at-eol
git config --global core.autocrlf input

repo=$1
username=$2
use_ssh=$3
if [ -z "$use_ssh" ]; then host="git@gitub"; else host="https://gitub"; fi

test -d $repo && rm -rf $repo

git clone $host.com/fsareshwala/$repo.git
cd $repo || log_error "directory $repo does not exist"

git remote remove origin
git remote add -f origin $host.com/$username/$repo.git
git remote add -f upstream $host.com/fsareshwala/$repo.git
git push -uf origin master

bazelrc=~/.bazelrc
test -e $bazelrc && rm -rf $bazelrc
echo "test --test_output=errors" >> $bazelrc
echo "test --cache_test_results=yes" >> $bazelrc
