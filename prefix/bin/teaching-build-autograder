#!/usr/bin/env bash

# Builds an autograder for gradescope for a given program

source ~/prefix/lib/utilities.sh

ensure_exists zip
ensure_exists git

gitroot=$(git rev-parse --show-toplevel)
cd $gitroot

if [[ ! -e "$gitroot/file.map" ]]; then
  log_error "file.map missing in gitroot"
fi

function generate_setup_sh() {
  echo "\
#!/usr/bin/env bash

curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
mv bazel.gpg /etc/apt/trusted.gpg.d/
echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list

apt update
apt install -y bazel
apt install -y curl
apt install -y gnupg
apt install -y jo
apt install -y openjdk-11-jdk
"
}

function generate_run_autograder() {
  local gitroot=$1
  local program=$2
  local tests="$(cat $gitroot/file.map | grep $program-test | awk '{print $2}' | tr '\n' ' ')"

  echo "\
#!/usr/bin/env bash

# copy tests from base repository to prevent students from modifying tests, forcing them to pass
cp -r '/autograder/source/java' '/autograder/submission'

numtests=\$(find /autograder/source/java -name '*_T.java' | xargs cat | grep '@Test' | wc -l)

cd /autograder/submission
bazel test $tests | tee results

score=\$numtests
if grep 'FAILURES!!!' results; then
  failures=\$(grep 'Failures:' results | wc -l)
  score=\$(( \$failures / \$numtests ))
fi

jo stdout_visibility=visible score=\$score > /autograder/results/results.json
"
}

# documentation: https://gradescope-autograders.readthedocs.io/en/latest/specs
function build_autograder() {
  local tempdir=$(mktemp -d)
  cd $tempdir

  setup_path="setup.sh"
  generate_setup_sh > $setup_path
  chmod 700 $setup_path

  run_autograder_path="run_autograder"
  generate_run_autograder $gitroot $program > $run_autograder_path
  chmod 700 $run_autograder_path

  # copy tests from base repository to prevent students from modifying tests, forcing them to pass
  tests=$(cat $gitroot/file.map | grep $program-src | awk '{print $2}' |
    sed 's,java/src,java/test,g; s/.java$/_T.java/g')
  for test in $tests; do
    destination=$(dirname $test)
    mkdir -p $destination
    cp $gitroot/$test $destination
  done

  zip -r autograder-$program.zip *

  cd $gitroot
  mv $tempdir/autograder-$program.zip $gitroot
  rm -rf $tempdir
}

function main() {
  local programs="$(cat file.map | awk -F':' '{print $1}' | awk -F'-' '{print $1}' | sort | uniq)"
  for program in $programs; do
    echo "building autograder for $program"
    build_autograder $program
  done
}

main "$@"
